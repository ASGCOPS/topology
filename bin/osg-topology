#!/usr/bin/python2.7
# -*- coding: utf-8 -*-

from __future__ import print_function

import os
import sys
import urllib
import fnmatch
import urlparse
import argparse
import xml.etree.ElementTree as ET

import requests

def get_auth_session(args):
    """
    Return a requests session ready for an XML query.
    """
    euid = os.geteuid()
    if euid == 0:
        cert = '/etc/grid-security/hostcert.pem'
        key = '/etc/grid-security/hostkey.pem'
    else:
        cert = '/tmp/x509up_u%d' % euid
        key = '/tmp/x509up_u%d' % euid

    cert = os.environ.get('X509_USER_PROXY', cert)
    key = os.environ.get('X509_USER_PROXY', key)

    if args.cert:
        cert = args.cert
    if args.key:
        key = args.key

    session = requests.Session()

    if os.path.exists(cert):
        session.cert = cert
    if os.path.exists(key):
        session.cert = (cert, key)

    return session


def update_url_hostname(url, args):

    if not args.host:
        return url
    url_tuple = list(urlparse.urlsplit(url))
    url_tuple[1] = args.host
    return urlparse.urlunsplit(url_tuple)


def get_vo_map(args, session = None):
    url = update_url_hostname("https://my.opensciencegrid.org/vosummary"
                              "/xml?all_vos=on&active_value=1", args)
    if session == None:
        with get_auth_session(args) as session:
            response = session.get(url)
    else:
        response = session.get(url)

    if response.status_code != requests.codes.ok:
        raise Exception("MyOSG request failed (status %d): %s" % \
              (response.status_code, response.text[:2048]))

    root = ET.fromstring(response.content)
    if root.tag != 'VOSummary':
        raise Exception("MyOSG returned invalid XML with root tag %s" % root.tag)
    vo_map = {}
    for child_vo in root:
        if child_vo.tag != "VO":
            raise Exception("MyOSG returned a non-VO  (%s) inside VO summary." % \
                            root.tag)
        vo_info = {}
        for child_info in child_vo:
            vo_info[child_info.tag] = child_info.text
        if 'ID' in vo_info and 'Name' in vo_info:
            vo_map[vo_info['Name'].lower()] = vo_info['ID']

    return vo_map


SERVICE_IDS = {'ce': 1,
               'srmv2': 3,
               'gridftp': 5,
               'xrootd': 142,
               'perfsonar-bandwidth': 130,
               'perfsonar-latency': 130,
               'gums': 101,
              }
def mangle_url(url, args, session = None):
    """
    Given a MyOSG URL, switch to using the hostname specified in the
    arguments
    """
    if not args.host:
        return url
    url_tuple = list(urlparse.urlsplit(url))
    url_tuple[1] = args.host

    qs_dict = urlparse.parse_qs(url_tuple[3])
    qs_list = urlparse.parse_qsl(url_tuple[3])

    if getattr(args, 'provides_service', None):
        if 'service' not in qs_dict:
            qs_list.append(("service", "on"))
        for service in args.provides_service.split(","):
            service = service.strip().lower()
            service_id = SERVICE_IDS.get(service)
            if not service_id:
                raise Exception("Requested service %s not known; known service"
                    " names: %s" % (service, ", ".join(SERVICE_IDS)))
            qs_list.append(("service_sel[]", str(service_id)))

    if getattr(args, 'owner_vo', None):
        vo_map = get_vo_map(args, session)
        if 'voown' not in qs_dict:
            qs_list.append(("voown", "on"))
        for vo in args.owner_vo.split(","):
            vo = vo.strip().lower()
            vo_id = vo_map.get(vo)
            if not vo_id:
                raise Exception("Requested owner VO %s not known; known VOs: %s" \
                    % (vo, ", ".join(vo_map)))
            qs_list.append(("voown_sel[]", str(vo_id)))

    url_tuple[3] = urllib.urlencode(qs_list, doseq=True)

    return urlparse.urlunsplit(url_tuple)


def get_contact_list_info(contact_list):
    """
    Get contact list info out of contact list
    """
    contact_list_info = []
    for contact in contact_list:
        if contact.tag == 'ContactType' or contact.tag == 'Type':
            contact_list_type = contact.text.lower()
        if contact.tag == 'Contacts':
            for contact in contact:
                contact_info = { 'ContactType' : contact_list_type }
                for contact_contents in contact:
                    contact_info[contact_contents.tag] = contact_contents.text
                contact_list_info.append(contact_info)

    return contact_list_info


def get_contacts(args, urltype, roottype):
    """
    Get one type of contacts for OSG.
    """
    base_url = "https://my.opensciencegrid.org/" + urltype + "summary/xml?" \
               "&active=on&active_value=1&disable=on&disable_value=0"
    with get_auth_session(args) as session:
        url = mangle_url(base_url, args, session)
        #print(url)
        response = session.get(url)

    if response.status_code != requests.codes.ok:
        print("MyOSG request failed (status %d): %s" % (response.status_code,
              response.text[:2048]), file=sys.stderr)
        return None

    root = ET.fromstring(response.content)
    if root.tag != roottype + 'Summary':
        print("MyOSG returned invalid XML with root tag %s" % root.tag,
              file=sys.stderr)
        return None

    return root


def get_resource_contacts(args):
    """
    Get resource contacts for OSG.  Return results.
    """
    root = get_contacts(args, 'rg', 'Resource')
    if root == None:
        return 1

    results = {}
    for child_rg in root:
        if child_rg.tag != "ResourceGroup":
            print("MyOSG returned a non-resource group (%s) inside summary." % \
                  root.tag, file=sys.stderr)
            return 1
        for child_res in child_rg:
            if child_res.tag != "Resources":
                continue
            for resource in child_res:
                name = None
                contact_list_info = []
                for resource_tag in resource:
                    if resource_tag.tag == 'Name':
                        name = resource_tag.text
                    if resource_tag.tag == 'ContactLists':
                        for contact_list in resource_tag:
                            if contact_list.tag == 'ContactList':
                                contact_list_info.extend( \
                                    get_contact_list_info(contact_list))

                if name and contact_list_info:
                    results[name] = contact_list_info

    return results


def list_resource_contacts(args):
    """
    List resource contacts for OSG.
    """
    results = get_resource_contacts(args)
    print_contacts(args, 'Resource', results)


def get_vo_contacts(args):
    """
    Get resource contacts for OSG.  Return results.
    """
    root = get_contacts(args, 'vo', 'VO')
    if root == None:
        return 1

    results = {}
    for child_vo in root:
        if child_vo.tag != "VO":
            print("MyOSG returned a non-VO (%s) inside summary." % \
                  root.tag, file=sys.stderr)
            return 1
        name = None
        contact_list_info = []
        for item in child_vo:
            if item.tag == 'Name':
                name = item.text
            if item.tag == "ContactTypes":
                for contact_type in item:
                    contact_list_info.extend( \
                        get_contact_list_info(contact_type))

        if name and contact_list_info:
            results[name] = contact_list_info

    return results


def list_vo_contacts(args):
    """
    List VO contacts for OSG.
    """
    results = get_vo_contacts(args)
    print_contacts(args, 'VO', results)


def list_contacts(args):
    """
    List resource and VO contacts for OSG.
    """
    if args.output_mode == "email":
        results = get_resource_contacts(args)
        results.update(get_vo_contacts(args))
        print_contacts(args, 'combined', results)
    else:
        list_resource_contacts(args)
        list_vo_contacts(args)


def print_contacts(args, contacttype, results):
    """
    Print contacts of given contacttype with the given results
    """

    if getattr(args, 'name_filter', None):
        # filter out undesired names
        for name in results.keys():
            if not fnmatch.fnmatch(name, args.name_filter) and \
                    args.name_filter not in name:
                del results[name]

    if args.contact_type != 'all':
        # filter out undesired contact types
        for name in results.keys():
            contact_list = []
            for contact in results[name]:
                contact_type = contact['ContactType']
                if contact_type.startswith(args.contact_type):
                    contact_list.append(contact)
            if contact_list == []:
                del results[name]
            else:
                results[name] = contact_list

    if args.output_mode == "email":
        emails = set()
        for name in results.keys():
            for contact in results[name]:
                if 'Email' in contact:
                    emails.add(contact['Email'])
        emails = list(emails)
        emails.sort()
        hadone = False
        for email in emails:
            if hadone:
                sys.stdout.write(' ')
            else:
                hadone = True
            sys.stdout.write(email)
        sys.stdout.write('\n')
    else:
        names = results.keys()
        names.sort()
        for name in names:
            print("- %s: %s" % (contacttype, name))
            keys = set()
            for contact in results[name]:
                key = None
                if 'Name' in contact and 'Email' in contact:
                    key = "%s <%s>" % (contact['Name'], contact['Email'])
                elif 'Name' in contact:
                    key = contact['Name']
                if key:
                    keys.add(key)
            keys = list(keys)
            keys.sort()
            for key in keys:
                 print(u"  * %s" % key)


def get_parser():
    """
    Return a parser object useable for interacting with OSG topology services.
    """
    oparser = argparse.ArgumentParser(prog=os.path.basename(sys.argv[0]),
                                      add_help=True)
    oparser.add_argument("--host", dest="host", default="my.opensciencegrid.org",
                help="Remote topology host (default my.opensciencegrid.org)")
    oparser.add_argument("--cert", dest="cert", help="Client certificate")
    oparser.add_argument("--key", dest="key", help="Client certificate private key")

    subparsers = oparser.add_subparsers()

    contactparsers = []

    list_resource_contacts_parser = subparsers.add_parser('list-resource-contacts',
        help='List OSG contacts by resource name.')
    contactparsers.append(list_resource_contacts_parser)
    list_resource_contacts_parser.set_defaults(which="list_resource_contacts")
    list_resource_contacts_parser.add_argument("--service",
        dest="provides_service", help="Filter on resources that provide given "
        "service(s)")
    list_resource_contacts_parser.add_argument("--vo",
        dest="owner_vo", help="Filter on resources that list VO(s) as a "
        "partial owner")
    list_resource_contacts_parser.add_argument(dest="name_filter", action="store",
        nargs="?", help="Shell expression filter on the resource name")

    list_vo_contacts_parser = subparsers.add_parser('list-vo-contacts',
        help='List OSG contacts by VO name.')
    contactparsers.append(list_vo_contacts_parser)
    list_vo_contacts_parser.set_defaults(which="list_vo_contacts")
    list_vo_contacts_parser.add_argument(dest="name_filter", action="store",
        nargs="?", help="Shell expression filter on the VO name")

    list_contacts_parser = subparsers.add_parser('list-contacts',
        help='List OSG resource and VO contacts.')
    contactparsers.append(list_contacts_parser)
    list_contacts_parser.set_defaults(which="list_contacts")

    for parser in contactparsers:
        parser.add_argument("--type", default="all",
            dest="contact_type", help="Filter on contact type "
            "(e.g. administrative, miscellaneous, security, or submitter; "
            "default all)")
        parser.add_argument("--output", default="full",
            dest="output_mode", help="Select the output mode "
            "(email or full; default full)")

    return oparser


def main():
    """
    Main utility function for OSG topology CLI.
    """
    oparser = get_parser()

    args = oparser.parse_args()

    commands = {"list_resource_contacts": list_resource_contacts,
                "list_vo_contacts": list_vo_contacts,
                "list_contacts": list_contacts,
               }

    command = commands[args.which]
    return command(args)


if __name__ == '__main__':
    sys.exit(main())

