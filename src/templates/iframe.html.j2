<style>
* {
margin: 0px;
padding: 0px;
}
body {
font-family: "Arial";
color: #333;
line-height:1.5em;
font-size: 10pt;
height: 100%;
}
h2, h3 {
border-bottom:1px dotted #AAAAAA;
padding-bottom:0.3em;
margin-bottom: 3px;
}
h3, h4, h5 {
font-size: 90%;
margin-bottom: 2px;
}
a {
color:white;
cursor:pointer;
text-decoration:underline;
}
p {
margin-bottom: 1px;
}

div.resource_group_header, div.downtime_group, div.group_header
{
background-color: #555;
background: -moz-linear-gradient(center top , #777, #444) repeat scroll 0 0 #555;
color: white;
margin-bottom: 0.3em;
margin-top: 0.5em;
padding: 4px 8px 4px 8px;
}
#content div.resource_group_header a {
color: white;
padding-left:0px;
background: none;
}

div.resource
{
padding: 2px;
padding-left:20px;
background:#ccc url(/static/images/server.png) no-repeat 2px 3px;
min-height: 16px;
margin-bottom: 5px;
border: 1px solid #bbb;
}
div.h4
{
background-color: #ddd;
font-weight: bold;
font-size: 12px;
}

div.resource_group
{
padding-left:5px;
padding-right:5px;
}

.round, .vo_report h4, .vo_report_fqan, .contact_info, .service_info
{
-moz-border-radius-topleft: 4px;
-moz-border-radius-topright: 4px;
-moz-border-radius-bottomright: 4px;
-moz-border-radius-bottomleft: 4px;
-webkit-border-top-left-radius: 4px;
-webkit-border-top-right-radius: 4px;
-webkit-border-bottom-left-radius: 4px;
-webkit-border-bottom-right-radius: 4px;
}

span.h3
{
margin-bottom: 3px;
font-weight: bold;
font-size: 13px;
}
span.h4
{
margin-bottom: 3px;
font-weight: bold;
font-size: 12px;
}

</style>

<!-- <link href="<?=fullbase()?>/css/html.css" rel="stylesheet" type="text/css" /> -->
<script type='text/javascript' src='/static/js/jquery-1.8.1.min.js'></script>
<script type="text/javascript" src="//maps.googleapis.com/maps/api/js?key=AIzaSyBN3KAdtotBzRlw_CzohzisMgqNapTA7lE"></script>
<script type="text/javascript">

var map;
var anchor;
var marker_id = {};
var infowindow = new google.maps.InfoWindow({maxWidth: 300});

function update_anchor() {
    var pos = map.getCenter();
    var new_anchor ="#"+pos.toUrlValue()+"|"+map.getZoom()+"|"+map.getMapTypeId();
    if(anchor != new_anchor) {
        document.location.hash=pos.toUrlValue()+"|"+map.getZoom()+"|"+map.getMapTypeId();
        anchor = new_anchor;
    }
    setTimeout("update_anchor()", 1000);
}

function init(scrollwheel) {
    //default
    //var location = new google.maps.LatLng(38.61687,-96.767578);
    var location = new google.maps.LatLng(29.22889,-90.08789);//show south americas
    var zoom = 4;
    var maptype = google.maps.MapTypeId.TERRAIN;
    
    //overrride with hash params
    anchor = document.location.hash.split("#")[1];

    if(anchor) {
        var params = anchor.split("|");
        var coords = params[0].split(",");
        location = new google.maps.LatLng(coords[0], coords[1]);
        zoom = parseInt(params[1]);
        maptype = params[2];
    }

    //create map
    map = new google.maps.Map(document.getElementById('map_canvas'), {
        scrollwheel: scrollwheel,
        center: location,
        zoom: zoom,
        mapTypeControl: false,
        mapTypeId: maptype
    });

    //setup listeners
    setTimeout("update_anchor()", 1000);//don't hook centerre_changed event.. it fires too often now

    /* 
    "CE" - C
    "Squid" - D
    "SRMv2" - D
    "net.perfSONAR.Bandwidth" - N
    "net.perfSONAR.Latency" - N
    "Submit Node" - C
    "XRootD cache server" - D
    "GridFtp" - D
    "XRootD component" - D
    "XRootD origin server" - D
    "Connect" - C
    "SRMv1" - D
    "LFC" - D
    "GUMS Server" - C
    "Glidein factory" - C
    "VOMS Server" - C
    "Apache Server" - D
    "FTS" - D
    */
    var compute_services = new Array("CE", "Submit Node", "Connect", "GUMS Server", "Glidein factory", "VOMS Server");
    var storage_services = new Array("Squid", "SRMv2", "XRootD cache server", "GridFtp", "XRootD component", "XRootD origin server", "SRMv1", "LFC", "Apache Server", "FTS");
    var network_services = new Array("net.perfSONAR.Bandwidth", "net.perfSONAR.Latency");

    const urlParams = new URLSearchParams(window.location.search);
    const queryView = urlParams.get('view');
    if (queryView != null) {
        $("#view option[value='"+queryView+"']").attr("selected", "selected");
    }
    
    var sites = {};
    {% for resourcegroup in resourcegroups %}
    {% if "Latitude" in resourcegroup["Site"] and "Longitude" in resourcegroup["Site"] and resourcegroup["Disable"] != True %}
    
    var curSite = "{{ resourcegroup['Site']['Name'] }}";
    // Add each resource group to the site
    if (!(curSite in sites)) {
        sites[curSite] = [ {{ resourcegroup["Site"]["Latitude"] }},
                           {{ resourcegroup["Site"]["Longitude"] }},
                           "{{ resourcegroup["Facility"]["Name"] }}",
                            Array(),
                            {isCompute: false, isStorage: false, isNetwork: false, isEdu: false, isCCStar: false} ]
    }
    
    var resourceGroup = {};
    resourceGroup["Name"] = "{{ resourcegroup['GroupName'] }}"
    resourceGroup["Resources"] = Array()
    
    {% for resource in resourcegroup['Resources']['Resource'] %}
    resourceGroup["Resources"].push("{{ resource['Name'] }}");
    // Check for edu in the FQDN
    var resourceFQDN = "{{ resource['FQDN'] }}";
    if (resourceFQDN.endsWith(".edu")) {
        sites[curSite][4].isEdu = true;
    }

    {% if 'Tags' in resource and resource['Tags'] != None %}
    {% for tag in resource['Tags'] %}
    tag = "{{ tag['Tag'] }}"
    if (tag == "CC*") {
        sites[curSite][4].isCCStar = true;
    }
    {% endfor %}
    {% endif %}
    
    {% for service in resource['Services']['Service'] %}
    // {{ service }}
    // {{ service["ID"] }}
    // {{ service["Description"] }}
    serviceName = "{{ service['Name'] }}"
    if (compute_services.includes(serviceName)) {
        sites[curSite][4].isCompute = true;
    } else if (storage_services.includes(serviceName)) {
        sites[curSite][4].isStorage = true;
    } else if (network_services.includes(serviceName)) {
        sites[curSite][4].isNetwork = true;
    }
    {% endfor %}
    {% endfor %}
    
    
    sites[curSite][3].push(resourceGroup);
    
    {% endif %}
    {% endfor %}
    {% set counter = 0 %}
    //add sites



    var counter = 0;
    for (site in sites) {
        var resourceCounter = 0;
        // Build the site
        var html = '<h2>' + sites[site][2] + '</h2><div style=\"overflow: auto; max-height: 300px; width: 300px;\">';
        for (var i = 0; i < sites[site][3].length; i++) {
            resourcegroup = sites[site][3][i];
            html += "<div class=\"resource_group_header round\"><span class=\"h3\">Resource Group: " + resourcegroup["Name"] + "</span></div>";
            resourceCounter += resourcegroup["Resources"].length;
            for (var a = 0; a < resourcegroup["Resources"].length; a++) {
                resource = resourcegroup["Resources"][a];
                html += "<div class=\"resource round\" style=\"margin-bottom: 0;\"><span class=\"h4\">" + resource + "</span></div>";
                
            }
        }
        var icon = '/static/images/star_blue.png';
        var marker = new google.maps.Marker({
            position: new google.maps.LatLng(sites[site][0], sites[site][1]),
            map: map,
            zIndex: resourceCounter,
            icon: icon,
            title: sites[site][2]
        });

        if (queryView == "EduvsOther") {
            // Edu = blue
            // Other = green
            if ((sites[site][4].isEdu == false)) {
                icon = '/static/images/star_green.png';
            }
        } else if (queryView =="ComputevsStorage"){
            // Default is storage vs compute
            // Compute - Blue
            // Storage - Purple
            // Compute + Storage = Green
            if ((sites[site][4].isCompute == false) && (sites[site][4].isStorage == true)) {
                icon = '/static/images/star_purple.png';
            } else if ((sites[site][4].isCompute == true) && (sites[site][4].isStorage == true)){
                icon = '/static/images/star_green.png';
            }
        } else if (queryView == "CCStar") {
            if (sites[site][4].isCCStar == true) {
                icon = '/static/images/star_blue.png';
            } else {
                // Remove marker from the map
                marker.setMap(null);
            }

        } else {
            icon = '/static/images/status_green_map.png';
        }

        marker.setIcon(icon)

        setInfoWindow(counter, marker, html);
        marker_id[counter] = {marker: marker, site: sites[site]};
        $("#site").append("<option value='" + counter + "'>" + site + "</option>");
        counter += 1;
    }
    

    $("#site").change(function() {
            var id = $(this).val();
            var marker = marker_id[id].marker;
            if(marker) {
                google.maps.event.trigger(marker, 'click');
            } else {
                infowindow.close();
            }
    });

    $("#view").change(function() {
        var view = $(this).val();
        for (const [key, value] of Object.entries(marker_id)) {
            // Initially add all markers to the map
            value.marker.setMap(map);
            if (view == "EduvsOther") {
                // Edu = blue
                // Other = green
                if ((value.site[4].isEdu == false)) {
                    value.marker.setIcon('/static/images/star_green.png');
                } else {
                    value.marker.setIcon('/static/images/star_blue.png');
                }
            } else if (view =="ComputevsStorage") {
                // storage vs compute
                // Compute - Blue
                // Storage - Purple
                // Compute + Storage = Green
                if ((value.site[4].isCompute == false) && (value.site[4].isStorage == true)) {
                    value.marker.setIcon('/static/images/star_purple.png');
                } else if ((value.site[4].isCompute == true) && (value.site[4].isStorage == true)){
                    value.marker.setIcon('/static/images/star_green.png');
                } else {
                    value.marker.setIcon('/static/images/star_blue.png');
                }
            } else if (view == "CCStar") {
                if (value.site[4].isCCStar == true) {
                    value.marker.setIcon('/static/images/star_blue.png');
                } else {
                    // Remove the marker from the map if it's not ccstar
                    value.marker.setMap(null);
                }

            } else {
                // Default is green dots
                value.marker.setIcon('/static/images/status_green_map.png');
            }
        }
        var legend = null;
        map.controls[google.maps.ControlPosition.RIGHT_BOTTOM].pop();
        if (view == "EduvsOther") {
            legend = $("#legend_edu").clone();
            window.history.replaceState('', '', UpdateQueryString("view", "EduvsOther"));
        } else if (view =="ComputevsStorage") {
            legend = $("#legend_compute").clone();
            window.history.replaceState('', '', UpdateQueryString("view", "ComputevsStorage"));
        } else if (view == "CCStar") {
            legend = $("#legend_ccstar").clone();
            window.history.replaceState('', '', UpdateQueryString("view", "CCStar"));
        } else {
            legend = $("#legend_default").clone();
            window.history.replaceState('', '', UpdateQueryString("view", ""));
        }
        map.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(legend[0]);
    });


    google.maps.event.addListener(infowindow, 'closeclick', function() {
        $("#site option[value=]").attr("selected", "selected");
    });

    var legend = null;
    
    if (queryView == "EduvsOther") {
        legend = $("#legend_edu").clone();
    } else if (queryView =="ComputevsStorage") {
        legend = $("#legend_compute").clone();
    } else if (queryView =="CCStar") {
        legend = $("#legend_ccstar").clone();
    } else {
        legend = $("#legend_default").clone();
    }
    map.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(legend[0]);
}

function setInfoWindow(id,marker, content) {
    google.maps.event.addListener(marker, 'click', function() {
        infowindow.close();
        infowindow.setContent(content);
        infowindow.open(map, marker);
        if(id != null) {
            $("#site option[value='"+id+"']").attr("selected", "selected");
        }
    });
}

// https://stackoverflow.com/questions/5999118/how-can-i-add-or-update-a-query-string-parameter
function UpdateQueryString(key, value, url) {
    if (!url) url = window.location.href;
    var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),
        hash;

    if (re.test(url)) {
        if (typeof value !== 'undefined' && value !== null) {
            return url.replace(re, '$1' + key + "=" + value + '$2$3');
        } 
        else {
            hash = url.split('#');
            url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');
            if (typeof hash[1] !== 'undefined' && hash[1] !== null) {
                url += '#' + hash[1];
            }
            return url;
        }
    }
    else {
        if (typeof value !== 'undefined' && value !== null) {
            var separator = url.indexOf('?') !== -1 ? '&' : '?';
            hash = url.split('#');
            url = hash[0] + separator + key + '=' + value;
            if (typeof hash[1] !== 'undefined' && hash[1] !== null) {
                url += '#' + hash[1];
            }
            return url;
        }
        else {
            return url;
        }
    }
}

$(document).ready(function() {
    init(false);//scroll wheel -- off
});
</script>

<style>
#map_canvas {
width: 100%;
height: 600px;
font-size: 10px;
}
/*shrink the font size slightly*/
#map_canvas h2 {
font-size: 12px;
}
#map_canvas span.h3, #map_canvas span.h4 {
font-size: 10px;
}
#map_canvas .resource_group_header {
padding: 2px 4px;
}
#map_canvas .resource {
padding-top: 3px;
padding-bottom: 0px;
background-position: 2px 1px;
}
#map_control {
float: right;
right: 3px;
top: 3px;
position: absolute;
z-index: 1;
background-color: white;
color: #666;
box-shadow: 1px 1px 5px #333;
}

#view_control {
float: left;
left: 3px;
top: 3px;
position: absolute;
z-index: 1;
background-color: white;
color: #666;
box-shadow: 1px 1px 5px #333;
}

.legend {
    /* font-family: Arial, sans-serif; */
    background: #fff;
    padding: 10px;
    margin: 10px;
    border: 3px solid #000;
}
.legend>div {
    display: -webkit-flexbox;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
    margin-bottom: 0.5em;
    /*
    -webkit-flex-align: center;
    -ms-flex-align: center;
    -webkit-align-items: center;
    align-items: center;
    justify-content: center;
    */
  }
  .legend>div>img {
    margin-right: 0.5em;
  }


</style>
<div style="position: relative; height: 100%;">
<div id="map_control">&nbsp;Site&nbsp;&nbsp;<select id="site" style="border: none;">
    <option value="">(None)</option>
    </select>
</div>

<div id="view_control">&nbsp;View&nbsp;&nbsp;<select id="view" style="border: none;">
    <option value="OSGSites">OSG Sites (default)</option>
    <option value="ComputevsStorage">Compute and Storage</option>
    <option value="EduvsOther">EDU sites and others</option>
    <option value="CCStar">CC* Sites</option>
    </select>
</div>
<div id="map_canvas"></div>
<div id="legend_compute" class="legend"><h2>Legend</h2>
    <div><img src="/static/images/star_blue.png">Compute Only</div>
    <div><img src="/static/images/star_purple.png">Storage Only</div>
    <div><img src="/static/images/star_green.png">Compute and Storage</div>
</div>
<div id="legend_edu" class="legend"><h2>Legend</h2>
    <div><img src="/static/images/star_blue.png">EDU Site</div>
    <div><img src="/static/images/star_green.png">Others</div>
</div>
<div id="legend_default" class="legend"><h2>Legend</h2>
    <div><img src="/static/images/status_green_map.png">OSG Site</div>
</div>
<div id="legend_ccstar" class="legend"><h2>Legend</h2>
    <div><img src="/static/images/star_blue.png">CC* Site</div>
</div>
</div>

<style>
#map_canvas {
height: 100%;
}
</style>